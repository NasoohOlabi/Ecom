// <auto-generated />
using System;
using DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(EComContext))]
    [Migration("20230109181812_AddedDataSeed")]
    partial class AddedDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttachmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("DB.Models.AttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3838),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3839),
                            Name = "Product Thumbnail"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3841),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3842),
                            Name = "Product Image"
                        });
                });

            modelBuilder.Entity("DB.Models.Attribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Attribute")
                        .IsUnique();

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("DB.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(3970),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(4466),
                            Name = "Smartphones"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6067),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6071),
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6085),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6086),
                            Name = "Fragrances"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6089),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6090),
                            Name = "Skincare"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6094),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6094),
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6104),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 278, DateTimeKind.Local).AddTicks(6104),
                            Name = "Home-decoration"
                        });
                });

            modelBuilder.Entity("DB.Models.CategoryHasAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryHasAttribute", (string)null);
                });

            modelBuilder.Entity("DB.Models.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_Coupon")
                        .IsUnique();

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("DB.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("NotificationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DB.Models.NotificationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveredAt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShippingId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShippingId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DB.Models.OrderHasProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(12,6)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderHasProduct", (string)null);
                });

            modelBuilder.Entity("DB.Models.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("DB.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Permission")
                        .IsUnique();

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("OrderCount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("RatingCount")
                        .HasColumnType("bigint");

                    b.Property<long>("RatingSum")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.HasIndex(new[] { "Name" }, "IX_Product")
                        .IsUnique();

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(7920),
                            Description = "An apple mobile which is nothing like apple",
                            Discount = 12.96m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(7931),
                            Name = "iPhone 9",
                            OrderCount = 0L,
                            Price = 549m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(7942),
                            Description = "SIM-Free, Model A19211 6.5-inch Super Retina HD display with OLED technology A12 Bionic chip with ...",
                            Discount = 17.94m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(7942),
                            Name = "iPhone X",
                            OrderCount = 0L,
                            Price = 899m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8018),
                            Description = "Samsung's new variant which goes beyond Galaxy to the Universe",
                            Discount = 15.46m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8019),
                            Name = "Samsung Universe 9",
                            OrderCount = 0L,
                            Price = 1249m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8025),
                            Description = "OPPO F19 is officially announced on April 2021.",
                            Discount = 17.91m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8025),
                            Name = "OPPOF19",
                            OrderCount = 0L,
                            Price = 280m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8031),
                            Description = "Huawei’s re-badged P30 Pro New Edition was officially unveiled yesterday in Germany and now the device has made its way to the UK.",
                            Discount = 10.58m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8031),
                            Name = "Huawei P30",
                            OrderCount = 0L,
                            Price = 499m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8042),
                            Description = "MacBook Pro 2021 with mini-LED display may launch between September, November",
                            Discount = 11.02m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8043),
                            Name = "MacBook Pro",
                            OrderCount = 0L,
                            Price = 1749m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8049),
                            Description = "Samsung Galaxy Book S (2020) Laptop With Intel Lakefield Chip, 8GB of RAM Launched",
                            Discount = 4.15m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8050),
                            Name = "Samsung Galaxy Book",
                            OrderCount = 0L,
                            Price = 1499m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8056),
                            Description = "Style and speed. Stand out on HD vIdeo calls backed by Studio Mics. Capture Ideas on the vibrant touchscreen.",
                            Discount = 10.23m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8057),
                            Name = "Microsoft Surface Laptop 4",
                            OrderCount = 0L,
                            Price = 1499m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8062),
                            Description = "Infinix Inbook X1 Ci3 10th 8GB 256GB 14 Win10 Grey – 1 Year Warranty",
                            Discount = 11.83m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8063),
                            Name = "Infinix INBOOK",
                            OrderCount = 0L,
                            Price = 1099m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8070),
                            Description = "HP Pavilion 15-DK1056WM Gaming Laptop 10th Gen Core i5, 8GB, 256GB SSD, GTX 1650 4GB, Windows 10",
                            Discount = 6.18m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8071),
                            Name = "HP Pavilion 15-DK1056WM",
                            OrderCount = 0L,
                            Price = 1099m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8079),
                            Description = "Mega Discount, Impression of Acqua Di Gio by GiorgioArmani concentrated attar perfume Oil",
                            Discount = 8.4m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8080),
                            Name = "perfume Oil",
                            OrderCount = 0L,
                            Price = 13m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8157),
                            Description = "Royal_Mirage Sport Brown Perfume for Men & Women - 120ml",
                            Discount = 15.66m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8157),
                            Name = "Brown Perfume",
                            OrderCount = 0L,
                            Price = 40m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8165),
                            Description = "Product details of Best Fog Scent Xpressio Perfume 100ml For Men cool long lasting perfumes for Men",
                            Discount = 8.14m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8165),
                            Name = "Fog Scent Xpressio Perfume",
                            OrderCount = 0L,
                            Price = 13m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8171),
                            Description = "Original Al Munakh® by Mahal Al Musk | Our Impression of Climate | 6ml Non-Alcoholic Concentrated Perfume Oil",
                            Discount = 15.6m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8172),
                            Name = "Non-Alcoholic Concentrated Perfume Oil",
                            OrderCount = 0L,
                            Price = 120m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8178),
                            Description = "Genuine  Al-Rehab spray perfume from UAE/Saudi Arabia/Yemen High Quality",
                            Discount = 10.99m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8179),
                            Name = "Eau De Perfume Spray",
                            OrderCount = 0L,
                            Price = 30m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 16L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8187),
                            Description = "L'OrÃ©al Paris introduces Hyaluron Expert Replumping Serum formulated with 1.5% Hyaluronic AcId",
                            Discount = 13.31m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8187),
                            Name = "Hyaluronic AcId Serum",
                            OrderCount = 0L,
                            Price = 19m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 17L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8194),
                            Description = "Tea tree oil contains a number of compounds, including terpinen-4-ol, that have been shown to kill certain bacteria,",
                            Discount = 4.09m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8194),
                            Name = "Tree Oil 30ml",
                            OrderCount = 0L,
                            Price = 12m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 18L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8202),
                            Description = "Dermive Oil Free Moisturizer with SPF 20 is specifically formulated with ceramIdes, hyaluronic acId & sunscreen.",
                            Discount = 13.1m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8203),
                            Name = "Oil Free Moisturizer 100ml",
                            OrderCount = 0L,
                            Price = 40m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 19L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8209),
                            Description = "Product name: rorec collagen hyaluronic acId white face serum riceNet weight: 15 m",
                            Discount = 10.68m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8210),
                            Name = "Skin Beauty Serum.",
                            OrderCount = 0L,
                            Price = 46m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 20L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8216),
                            Description = "Fair & Clear is Pakistan's only pure Freckle cream which helpsfade Freckles, Darkspots and pigments. Mercury level is 0%, so there are no sIde effects.",
                            Discount = 16.99m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8217),
                            Name = "Freckle Treatment Cream- 15gm",
                            OrderCount = 0L,
                            Price = 70m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 21L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8225),
                            Description = "Fine quality Branded Product Keep in a cool and dry place",
                            Discount = 4.81m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8225),
                            Name = "- Daal Masoor 500 grams",
                            OrderCount = 0L,
                            Price = 20m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 22L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8301),
                            Description = "Product details of Bake Parlor Big Elbow Macaroni - 400 gm",
                            Discount = 15.58m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8301),
                            Name = "Elbow Macaroni - 400 gm",
                            OrderCount = 0L,
                            Price = 14m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 23L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8309),
                            Description = "Specifications of Orange Essence Food Flavour For Cakes and Baking Food Item",
                            Discount = 8.04m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8310),
                            Name = "Orange Essence Food Flavou",
                            OrderCount = 0L,
                            Price = 14m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 24L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8317),
                            Description = "Original fauji cereal muesli 250gm box pack original fauji cereals muesli fruit nuts flakes breakfast cereal break fast faujicereals cerels cerel foji fouji",
                            Discount = 16.8m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8318),
                            Name = "Cereals Muesli Fruit Nuts",
                            OrderCount = 0L,
                            Price = 46m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 25L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8325),
                            Description = "Dry Rose Flower Powder Gulab Powder 50 Gram • Treats Wounds",
                            Discount = 13.58m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8326),
                            Name = "Gulab Powder 50 Gram",
                            OrderCount = 0L,
                            Price = 70m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 26L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8334),
                            Description = "Boho Decor Plant Hanger For Home Wall Decoration Macrame Wall Hanging Shelf",
                            Discount = 17.86m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8334),
                            Name = "Plant Hanger For Home",
                            OrderCount = 0L,
                            Price = 41m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 27L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8342),
                            Description = "Package Include 6 Birds with Adhesive Tape Shape: 3D Shaped Wooden Birds Material: Wooden MDF, Laminated 3.5mm",
                            Discount = 15.58m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8342),
                            Name = "Flying Wooden Bird",
                            OrderCount = 0L,
                            Price = 51m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 28L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8349),
                            Description = "3D led lamp sticker Wall sticker 3d wall art light on/off button  cell operated (included)",
                            Discount = 16.49m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8350),
                            Name = "3D Embellishment Art Lamp",
                            OrderCount = 0L,
                            Price = 20m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 29L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8358),
                            Description = "Handcraft Chinese style art luxury palace hotel villa mansion home decor ceramic vase with brass fruit plate",
                            Discount = 15.34m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8358),
                            Name = "Handcraft Chinese style",
                            OrderCount = 0L,
                            Price = 60m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        },
                        new
                        {
                            Id = 30L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8366),
                            Description = "Attractive DesignMetallic materialFour key hooksReliable & DurablePremium Quality",
                            Discount = 2.92m,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 910, DateTimeKind.Local).AddTicks(8366),
                            Name = "Key Holder",
                            OrderCount = 0L,
                            Price = 30m,
                            RatingCount = 0L,
                            RatingSum = 0L,
                            SellerId = 1L
                        });
                });

            modelBuilder.Entity("DB.Models.ProductHasAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductHasAttachment", (string)null);
                });

            modelBuilder.Entity("DB.Models.ProductHasCoupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductHasCoupon", (string)null);
                });

            modelBuilder.Entity("DB.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("DB.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "IX_Role")
                        .IsUnique();

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "0c43557b-eab6-4d87-be43-b677ba212430",
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3555),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3566),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "47dbd829-ed6b-4499-bf36-3ac4ddc2338d",
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3586),
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 899, DateTimeKind.Local).AddTicks(3587),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DB.Models.RoleHasPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleHasPermission", (string)null);
                });

            modelBuilder.Entity("DB.Models.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("DB.Models.Specification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecificationValueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecificationValueId");

                    b.ToTable("Specification", (string)null);
                });

            modelBuilder.Entity("DB.Models.SpecificationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SpecificationValue", (string)null);
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6fe4e637-c895-4eae-aa4f-d07199286e2d",
                            CreatedAt = new DateTime(2023, 1, 9, 21, 18, 11, 900, DateTimeKind.Local).AddTicks(951),
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            IsVerified = false,
                            LastName = "Owner",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2023, 1, 9, 21, 18, 11, 900, DateTimeKind.Local).AddTicks(955),
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDH8Ps1EL0j6LiqJXZ2v3W2NG1mOuY5tJdH/xMD4xGXXtpZhevoZ0M6gMmDdh2nDrg==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c7bfaec-5460-4a0b-8b38-668ea528c403",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("DB.Models.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.HasOne("DB.Models.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_AttachmentType");

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("DB.Models.CategoryHasAttribute", b =>
                {
                    b.HasOne("DB.Models.Attribute", "Attribute")
                        .WithMany("CategoryHasAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryHasAttribute_Attribute");

                    b.HasOne("DB.Models.Category", "Category")
                        .WithMany("CategoryHasAttributes")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryHasAttribute_Category");

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DB.Models.Notification", b =>
                {
                    b.HasOne("DB.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_NotificationType");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.HasOne("DB.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("DB.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.HasOne("DB.Models.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Shipping");

                    b.Navigation("Address");

                    b.Navigation("OrderStatus");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("DB.Models.OrderHasProduct", b =>
                {
                    b.HasOne("DB.Models.Order", "Order")
                        .WithMany("OrderHasProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderHasProduct_Order");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("OrderHasProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderHasProduct_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.HasOne("DB.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("DB.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_User");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DB.Models.ProductHasAttachment", b =>
                {
                    b.HasOne("DB.Models.Attachment", "Attachment")
                        .WithMany("ProductHasAttachments")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasAttachment_Attachment");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("ProductHasAttachments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasAttachment_Product");

                    b.Navigation("Attachment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.ProductHasCoupon", b =>
                {
                    b.HasOne("DB.Models.Coupon", "Coupon")
                        .WithMany("ProductHasCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasCoupon_Coupon");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("ProductHasCoupons")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasCoupon_Product");

                    b.Navigation("Coupon");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.Rating", b =>
                {
                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Product");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.RoleHasPermission", b =>
                {
                    b.HasOne("DB.Models.Permission", "Permission")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHasPermission_Permission");

                    b.HasOne("DB.Models.Role", "Role")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHasPermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DB.Models.Specification", b =>
                {
                    b.HasOne("DB.Models.Attribute", "Attribute")
                        .WithMany("Specifications")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_Specification_Attribute");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Specification_Product");

                    b.HasOne("DB.Models.SpecificationValue", "SpecificationValue")
                        .WithMany("Specifications")
                        .HasForeignKey("SpecificationValueId")
                        .IsRequired()
                        .HasConstraintName("FK_Specification_SpecificationValue");

                    b.Navigation("Attribute");

                    b.Navigation("Product");

                    b.Navigation("SpecificationValue");
                });

            modelBuilder.Entity("DB.Models.WishList", b =>
                {
                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_WishList_Product");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_WishList_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("DB.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("DB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("DB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("DB.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("DB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.Navigation("ProductHasAttachments");
                });

            modelBuilder.Entity("DB.Models.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("DB.Models.Attribute", b =>
                {
                    b.Navigation("CategoryHasAttributes");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("DB.Models.Category", b =>
                {
                    b.Navigation("CategoryHasAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DB.Models.Coupon", b =>
                {
                    b.Navigation("ProductHasCoupons");
                });

            modelBuilder.Entity("DB.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.Navigation("OrderHasProducts");
                });

            modelBuilder.Entity("DB.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.Permission", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.Navigation("OrderHasProducts");

                    b.Navigation("ProductHasAttachments");

                    b.Navigation("ProductHasCoupons");

                    b.Navigation("Ratings");

                    b.Navigation("Specifications");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("DB.Models.Role", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("DB.Models.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.SpecificationValue", b =>
                {
                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Notifications");

                    b.Navigation("Products");

                    b.Navigation("Ratings");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
