// <auto-generated />
using System;
using DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(EComContext))]
    partial class EComContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("DB.Models.AttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentType", (string)null);
                });

            modelBuilder.Entity("DB.Models.Attribute", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Attribute")
                        .IsUnique();

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("DB.Models.BoolValue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("BoolValue", (string)null);
                });

            modelBuilder.Entity("DB.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("DB.Models.CategoryHasAttribute", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryHasAttribute", (string)null);
                });

            modelBuilder.Entity("DB.Models.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_Coupon")
                        .IsUnique();

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("DB.Models.FloatValue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("FloatValue", (string)null);
                });

            modelBuilder.Entity("DB.Models.IntValue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("IntValue", (string)null);
                });

            modelBuilder.Entity("DB.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("NotificationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DB.Models.NotificationType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveredAt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShippingId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShippingId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DB.Models.OrderHasProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderHasProduct", (string)null);
                });

            modelBuilder.Entity("DB.Models.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("DB.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Permission")
                        .IsUnique();

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("OrderCount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("RatingCount")
                        .HasColumnType("bigint");

                    b.Property<long>("RatingSum")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.HasIndex(new[] { "Name" }, "IX_Product")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("DB.Models.ProductHasAttachment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductHasAttachment", (string)null);
                });

            modelBuilder.Entity("DB.Models.ProductHasCoupon", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductHasCoupon", (string)null);
                });

            modelBuilder.Entity("DB.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("DB.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Role")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DB.Models.RoleHasPermission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleHasPermission", (string)null);
                });

            modelBuilder.Entity("DB.Models.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("DB.Models.Specification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueType")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Specification", (string)null);
                });

            modelBuilder.Entity("DB.Models.StringValue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("StringValue", (string)null);
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DB.Models.WishList", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList", (string)null);
                });

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.HasOne("DB.Models.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_AttachmentType");

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("DB.Models.BoolValue", b =>
                {
                    b.HasOne("DB.Models.Specification", "Specification")
                        .WithMany("BoolValues")
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_BoolValue_Specification");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("DB.Models.CategoryHasAttribute", b =>
                {
                    b.HasOne("DB.Models.Attribute", "Attribute")
                        .WithMany("CategoryHasAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryHasAttribute_Attribute");

                    b.HasOne("DB.Models.Category", "Category")
                        .WithMany("CategoryHasAttributes")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryHasAttribute_Category");

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DB.Models.FloatValue", b =>
                {
                    b.HasOne("DB.Models.Specification", "Specification")
                        .WithMany("FloatValues")
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_FloatValue_Specification");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("DB.Models.IntValue", b =>
                {
                    b.HasOne("DB.Models.Specification", "Specification")
                        .WithMany("IntValues")
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_IntValue_Specification");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("DB.Models.Notification", b =>
                {
                    b.HasOne("DB.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_NotificationType");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.HasOne("DB.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("DB.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.HasOne("DB.Models.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Shipping");

                    b.Navigation("Address");

                    b.Navigation("OrderStatus");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("DB.Models.OrderHasProduct", b =>
                {
                    b.HasOne("DB.Models.Order", "Order")
                        .WithMany("OrderHasProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderHasProduct_Order");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("OrderHasProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderHasProduct_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.HasOne("DB.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("DB.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_User");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DB.Models.ProductHasAttachment", b =>
                {
                    b.HasOne("DB.Models.Attachment", "Attachment")
                        .WithMany("ProductHasAttachments")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasAttachment_Attachment");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("ProductHasAttachments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasAttachment_Product");

                    b.Navigation("Attachment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.ProductHasCoupon", b =>
                {
                    b.HasOne("DB.Models.Coupon", "Coupon")
                        .WithMany("ProductHasCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasCoupon_Coupon");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("ProductHasCoupons")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductHasCoupon_Product");

                    b.Navigation("Coupon");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.Rating", b =>
                {
                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Product");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.RoleHasPermission", b =>
                {
                    b.HasOne("DB.Models.Permission", "Permission")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHasPermission_Permission");

                    b.HasOne("DB.Models.Role", "Role")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHasPermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DB.Models.Specification", b =>
                {
                    b.HasOne("DB.Models.Attribute", "Attribute")
                        .WithMany("Specifications")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_Specification_Attribute");

                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Specification_Product");

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DB.Models.StringValue", b =>
                {
                    b.HasOne("DB.Models.Specification", "Specification")
                        .WithMany("StringValues")
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_StringValue_Specification");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.HasOne("DB.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DB.Models.WishList", b =>
                {
                    b.HasOne("DB.Models.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_WishList_Product");

                    b.HasOne("DB.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_WishList_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.Attachment", b =>
                {
                    b.Navigation("ProductHasAttachments");
                });

            modelBuilder.Entity("DB.Models.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("DB.Models.Attribute", b =>
                {
                    b.Navigation("CategoryHasAttributes");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("DB.Models.Category", b =>
                {
                    b.Navigation("CategoryHasAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DB.Models.Coupon", b =>
                {
                    b.Navigation("ProductHasCoupons");
                });

            modelBuilder.Entity("DB.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DB.Models.Order", b =>
                {
                    b.Navigation("OrderHasProducts");
                });

            modelBuilder.Entity("DB.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.Permission", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("DB.Models.Product", b =>
                {
                    b.Navigation("OrderHasProducts");

                    b.Navigation("ProductHasAttachments");

                    b.Navigation("ProductHasCoupons");

                    b.Navigation("Ratings");

                    b.Navigation("Specifications");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("DB.Models.Role", b =>
                {
                    b.Navigation("RoleHasPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DB.Models.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DB.Models.Specification", b =>
                {
                    b.Navigation("BoolValues");

                    b.Navigation("FloatValues");

                    b.Navigation("IntValues");

                    b.Navigation("StringValues");
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Notifications");

                    b.Navigation("Products");

                    b.Navigation("Ratings");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
